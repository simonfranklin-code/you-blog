As well as friends my Blog CMS has a followers feature. I have created routes, controller, and model for the followers table. I now wish to create UI and routes for Crud operations on the table. Is this possible?
app.js--------------------------------------------------------------
const followerRoutes = require('./routes/followerRoutes');
app.use('/followers', followerRoutes);

followerRoutes.js---------------------------------------------------
const express = require('express');
const router = express.Router();
const followerController = require('../controllers/followerController');
const { ensureAuthenticated } = require('../middleware/permissionMiddleware');

// Route to follow a user
router.post('/follow', ensureAuthenticated, followerController.followUser);

// Route to unfollow a user
router.post('/unfollow', ensureAuthenticated, followerController.unfollowUser);

// Route to get followers
router.get('/getfollowers', ensureAuthenticated, followerController.getFollowers);

// Route to get following
router.get('/following', ensureAuthenticated, followerController.getFollowing);

module.exports = router;
followerController.js------------------------------------------------
const Follower = require('../models/Follower');
const Notification = require('../models/Notification');

exports.followUser = async (req, res) => {
    const { UserId } = req.body;
    const FollowerUserId = req.user.id;  // Assume req.user contains the authenticated user's information

    try {
        await Follower.followUser(UserId, FollowerUserId);
        await Notification.createNotification(UserId, `You have a new follower.`);
        res.json({ success: true, message: 'User followed' });
    } catch (err) {
        Follower.logError(err);
        res.status(500).json({ success: false, message: 'Internal Server Error' });
    }
};

exports.unfollowUser = async (req, res) => {
    const { UserId } = req.body;
    const FollowerUserId = req.user.id;  // Assume req.user contains the authenticated user's information

    try {
        await Follower.unfollowUser(UserId, FollowerUserId);
        res.json({ success: true, message: 'User unfollowed' });
    } catch (err) {
        Follower.logError(err);
        res.status(500).json({ success: false, message: 'Internal Server Error' });
    }
};

exports.getFollowers = async (req, res) => {
    const UserId = req.user.id;  // Assume req.user contains the authenticated user's information

    try {
        const followers = await Follower.getFollowers(UserId);
        res.json({ success: true, followers });
    } catch (err) {
        Follower.logError(err);
        res.status(500).json({ success: false, message: 'Internal Server Error' });
    }
};

exports.getFollowing = async (req, res) => {
    const UserId = req.user.id;  // Assume req.user contains the authenticated user's information

    try {
        const following = await Follower.getFollowing(UserId);
        res.json({ success: true, following });
    } catch (err) {
        Follower.logError(err);
        res.status(500).json({ success: false, message: 'Internal Server Error' });
    }
};
Follower.js-----------------------------------------------------------------------------
const db = require('./db');
const fs = require('fs');

db.serialize(() => {
    db.run(`
    CREATE TABLE IF NOT EXISTS "Followers" (
        "FollowerId" INTEGER PRIMARY KEY AUTOINCREMENT,
        "UserId" INTEGER NOT NULL,
        "FollowerUserId" INTEGER NOT NULL,
        UNIQUE ("UserId", "FollowerUserId"),
        FOREIGN KEY ("UserId") REFERENCES "users"("id"),
        FOREIGN KEY ("FollowerUserId") REFERENCES "users"("id")
    );

    `);
});

class Follower {
    static logError(err) {
        const errorMessage = `${new Date().toISOString()} - Error: ${err.message}\n`;
        fs.appendFile('error.log', errorMessage, (fsErr) => {
            if (fsErr) {
                console.error('Failed to write to log file:', fsErr);
            }
        });
    }

    static followUser(UserId, FollowerUserId) {
        return new Promise((resolve, reject) => {
            db.run(
                `INSERT OR IGNORE INTO Followers (UserId, FollowerUserId)
                 VALUES (?, ?)`,
                [UserId, FollowerUserId],
                function (err) {
                    if (err) {
                        Follower.logError(err);
                        return reject(err);
                    }
                    resolve(this.lastID);  // Return the ID of the newly inserted follower
                }
            );
        });
    }

    static unfollowUser(UserId, FollowerUserId) {
        return new Promise((resolve, reject) => {
            db.run(
                `DELETE FROM Followers WHERE UserId = ? AND FollowerUserId = ?`,
                [UserId, FollowerUserId],
                function (err) {
                    if (err) {
                        Follower.logError(err);
                        return reject(err);
                    }
                    resolve(this.changes);  // Number of rows deleted
                }
            );
        });
    }

    static getFollowers(UserId) {
        return new Promise((resolve, reject) => {
            db.all(
                `SELECT * FROM Followers WHERE UserId = ?`,
                [UserId],
                (err, rows) => {
                    if (err) {
                        Follower.logError(err);
                        return reject(err);
                    }
                    resolve(rows);
                }
            );
        });
    }

    static getFollowing(UserId) {
        return new Promise((resolve, reject) => {
            db.all(
                `SELECT * FROM Followers WHERE FollowerUserId = ?`,
                [UserId],
                (err, rows) => {
                    if (err) {
                        Follower.logError(err);
                        return reject(err);
                    }
                    resolve(rows);
                }
            );
        });
    }
}

module.exports = Follower;










