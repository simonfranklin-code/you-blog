extends layout

block content

    h1 HTML Sections
    button.btn.btn-primary.btn-sm.mb-3#newHtmlSectionBtn New HTML Section
    form#filterForm
      .form-row
        .form-group.col-md-2
          label(for='anchor') Anchor
          input.form-control.form-control-sm#anchorFilter(name='anchor' placeholder='Anchor')
        .form-group.col-md-3
          label(for='blogPostId') Blog Post
          select.form-control.form-control-sm#blogPostIdFilter( name='blogPostId')
          

        .form-group-col-md-2
          label(for='limit') Sections limit
          select.form-control.form-control-sm(name='limit' id='limit' required)
            option(value=1) 1
            option(value=2) 2
            option(value=3) 3
            option(value=5 selected) 5
            option(value=10) 10
            option(value=15) 15
            option(value=20) 20
            option(value=25) 25
        .form-group.col-md-1.align-self-end
          button.btn.btn-primary.btn-sm#filterButton Filter

    .table-responsive
      table.table#htmlSectionsTable
        thead
          tr
            th
              a(href='#' class='sort' data-field='BlogPostId') Id
            th
              a(href='#' class='sort' data-field='Anchor') Anchor
            th
              a(href='#' class='sort' data-field='ViewIndex') View Index
            th
              a(href='#' class='sort' data-field='DateCreated') Date Created
            th
              a(href='#' class='sort' data-field='Slug') Slug
            th Actions

        tbody#htmlSectionsTableBody

    nav
      ul.pagination
        li.page-item
          button.page-link(type='button' id='previousPage') Previous
        li.page-item
          span.page-link(id='currentPage') 1
        li.page-item
          button.page-link(type='button' id='nextPage') Next

    .alert.alert-danger#logError(style='display: none;') Error fetching HTML sections

    // Modals
    // Create/Edit Modal
    .modal.fade#htmlSectionModal( data-backdrop="static" data-keyboard="false" tabindex='-1' role='dialog')
      .modal-dialog(role='document')
        .modal-content
          .modal-header
            h5.modal-title#htmlSectionModalTitle New HTML Section
            button.close(type='button' data-dismiss='modal' aria-label='Close')
              span(aria-hidden='true') &times;
          .modal-body(id="editHtmlSectionBody")
            form#htmlSectionForm
              input(type='hidden' id='htmlSectionId' name='id')
              .form-group
                label(for='htmlContent') HTML
                textarea.form-control.form-control-sm#htmlContent(name='html')
              .form-group
                label(for='viewIndex') View Index
                input.form-control.form-control-sm#viewIndex(name='viewIndex' type='number')
              .form-group
                label(for='anchor') Anchor
                input.form-control.form-control-sm#anchor(name='anchor' required)
              .form-group
                label(for='slug') Slug
                input.form-control.form-control-sm#slug(name='slug')
              button.btn.btn-primary.btn-sm(type='submit') Save
          .modal-footer
            button.btn.btn-secondary(type='button' data-dismiss='modal') Close

    // View Modal
    .modal.fade#viewHtmlSectionModal( data-backdrop="static" data-keyboard="false" tabindex='-1' role='dialog')
      .modal-dialog.modal-xl.modal-dialog-scrollable(role='document')
        .modal-content
          .modal-header
                       
            .btn-group.btn-group-sm(role='group', aria-label='Button group with nested dropdown')
              
              button.btn.btn-primary.btn-sm(type='button' id='edit-html')
                i.fas.fa-edit             
              button.btn.btn-primary.btn-sm(type='button' id='save-html')
                i.fas.fa-save
              button.btn.btn-primary.btn-sm(type='button' id='image-html')
                i.fas.fa-image
              button.btn.btn-primary.btn-sm(type='button' id='insert-link')
                i.fas.fa-link
              button.btn.btn-primary.btn-sm(type='button' id='remove-link')
                i.fas.fa-unlink
              button.btn.btn-primary.btn-sm(type='button' id='font-size')
                i.fas.fa-text-height
              button.btn.btn-primary.btn-sm(type='button' id='font-family')
                i.fas.fa-font
              button.btn.btn-primary.btn-sm(type='button' id='font-color')
                i.fas.fa-palette
              .btn-group.btn-group-sm(role='group')
                button.btn.btn-primary.btn-sm.dropdown-toggle(type='button', data-toggle='dropdown', aria-expanded='false')
                  | Menu
                .dropdown-menu
                  a.dropdown-item(href='#') Dropdown link
                  a.dropdown-item(href='#') Dropdown link

            
          .modal-body(id="viewHtmlSectionBody")
            #editableHtmlContent
            input#imageUploadInput(type='file' name='imageUploadInput' accept='image/*' style='position: absolute; width: 0px; height: 0px; left: -3000px; top: -3000px;')
          .modal-footer
            button.btn.btn-secondary(type='button' data-dismiss='modal') Close
    // Delete Confirmation Modal
    .modal.fade#confirmDeleteModal(tabindex='-1' role='dialog')
      .modal-dialog(role='document')
        .modal-content
          .modal-header
            h5.modal-title Confirm Delete
            button.close(type='button' data-dismiss='modal' aria-label='Close')
              span(aria-hidden='true') &times;
          .modal-body
            p Are you sure you want to delete this HTML section?
          .modal-footer
            button.btn.btn-secondary.btn-sm(type='button' data-dismiss='modal') Cancel
            button.btn.btn-danger.btn-sm#confirmDeleteBtn(type='button') Delete
    // Link Insertion Modal
    .modal.fade#insertLinkModal(tabindex='-1' role='dialog' aria-labelledby='insertLinkModalLabel' aria-hidden='true')
      .modal-dialog(role='document')
        .modal-content
          .modal-header
            h5.modal-title#insertLinkModalLabel Insert Link
            button.close(type='button' data-dismiss='modal' aria-label='Close')
              span(aria-hidden='true') &times;
          .modal-body
            form#insertLinkForm
              .form-group
                label(for='linkUrl') URL
                input.form-control#linkUrl(type='text' name='linkUrl' required)
              .form-group
                label(for='linkText') Text
                input.form-control#linkText(type='text' name='linkText' readonly)
          .modal-footer
            button.btn.btn-secondary(type='button' data-dismiss='modal') Close
            button.btn.btn-primary#insertLinkBtn(type='button') Insert Link
    // Font Size Modal
    .modal.fade(id='fontSizeModal', tabindex='-1', role='dialog')
      .modal-dialog(role='document')
        .modal-content
          .modal-header
            h5.modal-title Font Size
              button.close(type='button', data-dismiss='modal', aria-label='Close')
                span(aria-hidden='true') &times;
          .modal-body
            select#fontSizeSelect.form-control
              option(value='12px') 12px
              option(value='14px') 14px
              option(value='16px') 16px
              option(value='18px') 18px
              option(value='20px') 20px
              option(value='24px') 24px
          .modal-footer
            button.btn.btn-primary(type='button', id='applyFontSize') Apply
            button.btn.btn-secondary(type='button', data-dismiss='modal') Close

    // Font Family Modal
    .modal.fade(id='fontFamilyModal', tabindex='-1', role='dialog')
      .modal-dialog(role='document')
        .modal-content
          .modal-header
            h5.modal-title Font Family
              button.close(type='button', data-dismiss='modal', aria-label='Close')
                span(aria-hidden='true') &times;
          .modal-body
            select#fontFamilySelect.form-control
              option(value='Arial') Arial
              option(value='Courier New') Courier New
              option(value='Georgia') Georgia
              option(value='Times New Roman') Times New Roman
              option(value='Verdana') Verdana
          .modal-footer
            button.btn.btn-primary(type='button', id='applyFontFamily') Apply
            button.btn.btn-secondary(type='button', data-dismiss='modal') Close

    // Font Color Modal
    .modal.fade(id='fontColorModal', tabindex='-1', role='dialog')
      .modal-dialog(role='document')
        .modal-content
          .modal-header
            h5.modal-title Font Color
              button.close(type='button', data-dismiss='modal', aria-label='Close')
                span(aria-hidden='true') &times;
          .modal-body
            input#fontColorInput(type='color', class='form-control')
          .modal-footer
            button.btn.btn-primary(type='button', id='applyFontColor') Apply
            button.btn.btn-secondary(type='button', data-dismiss='modal') Close

    script.
      $(document).ready(function () {
        let currentPage = 1;
        let sortField = 'DateCreated';
        let sortOrder = 'DESC';
        let currentHtmlSectionId = 0;
        let currentHtmlSectionAnchor = '';
        let selectedText = '';

        function fetchHtmlSections() {
            const anchor = $('#anchorFilter').val();
            const blogPostId = $('#blogPostIdFilter').val();
            const limit = $('#limit').val();
            
            $.ajax({
                url: '/admin/htmlSections/api',
                data: { page: currentPage, limit, sortField, sortOrder, anchor, blogPostId },
                success: function (data) {
                    const tbody = $('#htmlSectionsTableBody');
                    tbody.empty();

                    
                    data.blogPosts.forEach(blogPost => {
                        let option = `<option value="${blogPost.BlogPostId}" name="${blogPost.Title}">${blogPost.Title}</option>`;
                        $('#blogPostIdFilter').append(option);
                    });

                    data.htmlSections.forEach(section => {
                        tbody.append(`
                            <tr>
                              <td>${section.HtmlSectionID}</td>
                              <td class="admin-blogs-ellipsis" data-toggle="popover" title="HtmlSection Anchor details" data-content="${section.Anchor}">${section.Anchor}</td>
                              <td>${section.ViewIndex}</td>
                              <td>${section.DateCreated}</td>
                              <td class="admin-blogs-ellipsis" data-toggle="popover" title="HtmlSection Slug details" data-content="${section.Slug}">${section.Slug}</td>
                              <td>
                                <button class="btn btn-primary btn-sm view-btn" data-anchor="${section.Anchor}" data-id="${section.HtmlSectionID}">View</button>
                                <button class="btn btn-warning btn-sm edit-btn" data-id="${section.HtmlSectionID}">Edit</button>
                                <button class="btn btn-danger btn-sm delete-btn" data-id="${section.HtmlSectionID}">Delete</button>
                              </td>
                            </tr>
                        `);
                    });
                    $('#currentPage').text('Page ' + currentPage + ' of ' + data.totalPages + ' pages');
                    

                    $('#previousPage').prop('disabled', currentPage <= 1);
                    $('#nextPage').prop('disabled', currentPage >= data.totalPages);

                    $('[data-toggle="popover"]').popover({
                      trigger: 'hover',
                      placement: 'left',
                      container: 'body'
                    });
                }
            });
        }



        $('#filterButton').on('click', function (e) {
            e.preventDefault();
            currentPage = 1;
            fetchHtmlSections();
        });

        $('#previousPage').on('click', function (e) {
            e.preventDefault();
            if (currentPage > 1) {
                currentPage--;
                fetchHtmlSections();
            }
        });

        $('#nextPage').on('click', function (e) {
            e.preventDefault();
            currentPage++;
            fetchHtmlSections();
        });

        $('.sort').on('click', function (e) {
            e.preventDefault();
            const field = $(this).data('field');
            sortOrder = (sortField === field && sortOrder === 'ASC') ? 'DESC' : 'ASC';
            sortField = field;
            fetchHtmlSections();
        });

        $('#newHtmlSectionBtn').on('click', function () {
            $('#htmlSectionModalTitle').text('New HTML Section');
            $('#htmlSectionForm')[0].reset();
            $('#htmlSectionId').val('');
            $('#htmlSectionModal').modal('show');
        });

        $(document).on('click', '.edit-btn', function () {
            const htmlSectionId = $(this).data('id');
            $.get(`/admin/htmlSections/${htmlSectionId}`, function (section) {
                $('#htmlSectionModalTitle').text('Edit HTML Section');
                $('#htmlContent').val(section.Html);
                $('#viewIndex').val(section.ViewIndex);
                $('#anchor').val(section.Anchor);
                $('#slug').val(section.Slug);
                $('#htmlSectionId').val(section.HtmlSectionID);
                $('#htmlSectionModal').modal('show');
            });
        });

        $(document).on('click', '.view-btn', function () {
            const htmlSectionId = $(this).data('id');
            currentHtmlSectionId = htmlSectionId;
            currentHtmlSectionAnchor = $(this).data('anchor');
            $.get(`/admin/htmlSections/${htmlSectionId}`, function (section) {

                $('#editableHtmlContent').html(section.Html);
                $('#viewHtmlSectionModal').modal('show');
            });
        });

        $('#htmlSectionForm').on('submit', function (e) {
            e.preventDefault();
            const htmlSectionId = $('#htmlSectionId').val();
            const url = htmlSectionId ? `/admin/htmlSections/edit/${htmlSectionId}` : '/admin/htmlSections/create';
            $.post(url, $(this).serialize(), function (response) {
                if (response.success) {
                    $('#htmlSectionModal').modal('hide');
                    fetchHtmlSections();
                }
            });
        });

        $('#saveHtmlSectionForm').on('submit', function (e) {
            e.preventDefault();
            const saveHtmlSectionId = $('#saveHtmlSectionId').val();
            $('#saveHtmlSectionHtml').val($('#htmlSectionHtml').html());

            const url = saveHtmlSectionId ? `/admin/htmlSections/edit/${saveHtmlSectionId}` : '/admin/htmlSections/create';
            $.post(url, $(this).serialize(), function (response) {
                if (response.success) {
                    $('#viewHtmlSectionModal').modal('hide');
                    fetchHtmlSections();
                }
            });
        });
        
        $('#edit-html').on('click', function () {

            const contentDiv = $('#editableHtmlContent');
            const isEditable = contentDiv.prop('contenteditable') === 'true';
            contentDiv.prop('contenteditable', !isEditable);
            $('#save-html').prop('disabled', isEditable);
            //- $(this).text(isEditable ? 'Edit' : 'Cancel');

        });


        $('#save-html').on('click', function() {
            const updatedHtml = $('#editableHtmlContent').html();
            const htmlSectionId = currentHtmlSectionId;

            $.ajax({
                url: '/admin/htmlSections/update',
                method: 'POST',
                data: {
                    HtmlSectionID: htmlSectionId,
                    Html: updatedHtml
                },
                success: function(response) {
                    if (response.success) {
                        alert('Content saved successfully!');
                    } else {
                        alert('Failed to save content.');
                    }
                    $('#viewHtmlSectionModal').modal('hide');
                },
                error: function(err) {
                    alert(JSON.stringify(err));
                }
            });
        });
        
        $('#image-html').on('click', function () {
            $('#imageUploadInput').click();
        });

       $('.image-wrapper > img').on('click', function () {
            $('#imageUploadInput').click();
        });


        $('#imageUploadInput').on('change', function () {
            const file = this.files[0];

            if (file) {
                const formData = new FormData();
                formData.append('image', file);

                $.ajax({
                    url: '/admin/htmlSections/uploadImage',
                    type: 'POST',
                    data: formData,
                    processData: false,
                    contentType: false,
                    success: function (response) {
                        if (response.success) {
                            const imageUrl = response.imageUrl;
                            const section = $('#' + currentHtmlSectionAnchor);
                            if(section.hasClass('header1')){
                                section.attr('style','background-image: url("'+ imageUrl + '")');
                            }else{
                                $('.image-wrapper > img').attr('src', imageUrl);
                            }
                            
                        } else {
                            alert('Image upload failed.');
                        }
                    },
                    error: function () {
                        alert('An error occurred while uploading the image.');
                    }
                });
            }
        });

        $(document).on('click', '.delete-btn', function () {
            const htmlSectionId = $(this).data('id');
            $('#confirmDeleteBtn').data('id', htmlSectionId);
            $('#confirmDeleteModal').modal('show');
        });

        $('#confirmDeleteBtn').on('click', function () {
            const htmlSectionId = $(this).data('id');
            $.post(`/admin/htmlSections/delete/${htmlSectionId}`, function (response) {
                if (response.success) {
                    $('#confirmDeleteModal').modal('hide');
                    fetchHtmlSections();
                }
            });
        });


        

        // Function to get the selected text
        function getSelectionText() {
            let text = '';
            if (window.getSelection) {
                text = window.getSelection().toString();
            } else if (document.selection && document.selection.type != 'Control') {
                text = document.selection.createRange().text;
            }
            return text;
        }

        // Event handler for the Insert Link button
        $('#insert-link').on('click', function () {
            selectedText = getSelectionText();
            if (selectedText.length > 0) {
                $('#linkText').val(selectedText);
                $('#insertLinkModal').modal('show');
            } else {
                alert('Please select the text you want to hyperlink.');
            }
        });

        // Event handler for the Insert Link button in the modal
        $('#insertLinkBtn').on('click', function () {
            const linkUrl = $('#linkUrl').val();
            const linkText = $('#linkText').val();

            if (linkUrl && linkText) {
                const anchorTag = `<a href="${linkUrl}" target="_blank">${linkText}</a>`;
                const contentDiv = $('#editableHtmlContent');
                const currentHtml = contentDiv.html();
                const newHtml = currentHtml.replace(linkText, anchorTag);
                contentDiv.html(newHtml);
                $('#insertLinkModal').modal('hide');
            } else {
                alert('Please enter the URL.');
            }
        });

        // Event handler for the Remove Link button
        $('#remove-link').on('click', function () {
            // Get the selected link
            const selectedElement = window.getSelection().anchorNode.parentNode;
    
            if (selectedElement.tagName === 'A') {
                // Remove the link while preserving the text
                const linkText = selectedElement.innerText;
                $(selectedElement).replaceWith(linkText);
            } else {
                alert('Please select a link to remove.');
            }
        });

        // Function to get the selected text node
        function getSelectedTextNode() {
            const selection = window.getSelection();
            if (selection.rangeCount > 0) {
                const range = selection.getRangeAt(0);
                return range.commonAncestorContainer.nodeType === 3 ? range.commonAncestorContainer : range.commonAncestorContainer.firstChild;
            }
            return null;
        }

        // Event handler for the Font Size button
        $('#font-size').on('click', function () {
            selectedText = getSelectedTextNode();
            if (selectedText) {
                $('#fontSizeModal').modal('show');
            } else {
                alert('Please select the text you want to change.');
            }
        });

        // Event handler for the Apply button in the Font Size modal
        $('#applyFontSize').on('click', function () {
            const fontSize = $('#fontSizeSelect').val();
            if (selectedText) {
                $(selectedText).css('font-size', fontSize);
                $('#fontSizeModal').modal('hide');
            }
        });

        // Event handler for the Font Family button
        $('#font-family').on('click', function () {
            selectedText = getSelectedTextNode();
            if (selectedText) {
                $('#fontFamilyModal').modal('show');
            } else {
                alert('Please select the text you want to change.');
            }
        });

        // Event handler for the Apply button in the Font Family modal
        $('#applyFontFamily').on('click', function () {
            const fontFamily = $('#fontFamilySelect').val();
            if (selectedText) {
                $(selectedText).css('font-family', fontFamily);
                $('#fontFamilyModal').modal('hide');
            }
        });

        // Event handler for the Font Color button
        $('#font-color').on('click', function () {
            selectedText = getSelectedTextNode();
            if (selectedText) {
                $('#fontColorModal').modal('show');
            } else {
                alert('Please select the text you want to change.');
            }
        });

        // Event handler for the Apply button in the Font Color modal
        $('#applyFontColor').on('click', function () {
            const fontColor = $('#fontColorInput').val();
            if (selectedText) {
                $(selectedText).css('color', fontColor);
                $('#fontColorModal').modal('hide');
            }
        });
        fetchHtmlSections();
      });
