extends layout
block titleBlock
  title #{title}

block content 
    // begin::App Content Header
    .app-content-header
      // begin::Container
      .container-fluid
        // begin::Row
        .row
           .col-sm-6
             h3.mb-0 #{title}
           .col-sm-6
             ol.breadcrumb.float-sm-end
               li.breadcrumb-item
                 a(href='/admin/dashboard') Admin
               li.breadcrumb-item.active(aria-current='page')
                 | Users
    .row.g-4
      // begin::Col
      .col-12.connectedSortable
        .callout.callout-info
          | For detailed documentation of Form visit 
          a.callout-link(href='https://getbootstrap.com/docs/5.3/forms/overview/' target='_blank' rel='noopener noreferrer')
          | Bootstrap Form
      // end::Col
      // begin::Col  
      .col-md-12.connectedSortable
        .card.card-success.card-outline.mb-4
          // begin::Header
          .card-header
            .card-title 
              | Filter HTML Sections
          // end::Header
          // begin::Body
          .card-body

            .container.mt-5
              //- button.btn.btn-primary.btn-sm.addUser.mb-3(data-toggle="modal", data-target="#userModal") Add User
              .row.mb-3
                .col-md-3
                  input.form-control.form-control-sm#usernameFilter(placeholder="Filter by Username")
                .col-md-3
                  input.form-control.form-control-sm#emailFilter(placeholder="Filter by Email")
                .col-md-3
                  select.form-select.form-control-sm#roleFilter
                    option(value="") All Roles
                    option(value="user") User
                    option(value="admin") Admin
                    option(value="editor") Editor
                .col-md-3
                  button.btn.btn-secondary.btn-sm#applyFilters Apply Filters
          // begin::Footer
          .card-footer
           
            nav
              ul.pagination
                li.page-item
                  button.page-link(type='button' id='previousPage') Previous
                li.page-item
                  span.page-link(id='currentPage') 1
                li.page-item
                  button.page-link(type='button' id='nextPage') Next
          // end::Footer
      // begin::Col  
      .col-md-12.connectedSortable
        .card.card-success.card-outline.mb-4
          // begin::Header
          .card-header
            .card-title Filter HTML Sections
          // end::Header
        
          // begin::Body
          .card-body

            table.table
              thead
                tr
                  th(scope="col" class="sortable") ID
                  th(scope="col" class="sortable") Username
                  th(scope="col" class="sortable") Email
                  th(scope="col" class="sortable") Role
                  th(scope="col") Aavatar
                  th(scope="col") Actions
                tbody#userTableBody
          // begin::Footer
          .card-footer
            nav
              ul.pagination#pagination
                li.page-item
                  button.page-link(type='button' id='previousPage') Previous
                li.page-item
                  span.page-link(id='currentPage') 1
                li.page-item
                  button.page-link(type='button' id='nextPage') Next
          // end::Footer
    // Modal
    .modal.fade#userModal(tabindex="-1" aria-labelledby="userModalLabel" aria-hidden="true")
      .modal-dialog
        .modal-content
          .modal-header
            h5.modal-title#userModalLabel Add User
            button.btn-close(type="button" data-bs-dismiss="modal" aria-label="Close")
          .modal-body
            form#userForm
              input(type="hidden" name="id" id="userId")
              .mb-3
                label.form-label(for="username") Username
                input.form-control(type="text" id="username" name="username" required)
              .mb-3
                label.form-label(for="email") Email
                input.form-control(type="email" id="email" name="email" required)
              .mb-3
                label.form-label(for="role") Role
                select.form-select(id="role" name="role" required)
                  option(value="user") User
                  option(value="admin") Admin
              .mb-3
                label.form-label(for="avatar") Avatar
                input.form-control(type="text" id="avatar" name="avatar")
              .mb-3
                button.btn.btn-primary(type="submit") Save changes
          .modal-footer
            button.btn.btn-secondary(data-bs-dismiss="modal") Close
            

    script.
      $(document).ready(function() {
        const $userForm = $('#userForm');
        const $userModal = new bootstrap.Modal($('#userModal')[0]);
        const $userTableBody = $('#userTableBody');
        const $pagination = $('#pagination');
        let currentPage = 1;
        const limit = 10;

        function loadUsers(page = 1, filters = {}, sort = {}) {
          $.ajax({
            url: '/admin/api/users',
            method: 'GET',
            data: { page, limit, ...filters, sortField: sort.field, sortOrder: sort.order },
            success: function(data) {
              $userTableBody.empty();
              if (data.success) {
                data.users.forEach(user => {
                  $userTableBody.append(`
                    <tr data-id="${user.id}" data-avatar="${user.avatar}">
                      <td>${user.id}</td>
                      <td>${user.username}</td>
                      <td>${user.email}</td>
                      <td>${user.role}</td>
                      <td><img class="direct-chat-img" src="${user.avatar}" alt="user image" draggable="false"></td>
                      <td>
                        <i class="fas fa-edit mbr-iconfont mbr-iconfont-btn editUserButton"></i>
                        <i class="far fa-times-circle mbr-iconfont mbr-iconfont-btn deleteUserButton"></i>
                      </td>
                    </tr>
                  `);
                });

                // Update pagination
                const totalPages = Math.ceil(data.total / limit);
                $pagination.empty();
                for (let i = 1; i <= totalPages; i++) {
                  $pagination.append(`
                    <li class="page-item ${i === page ? 'active' : ''}">
                      <a class="page-link" href="#">${i}</a>
                    </li>
                  `);
                }
              }
            },
            error: function(err) {
              console.error('Error fetching users:', err);
            }
          });
        }

        function getFilters() {
          return {
            username: $('#usernameFilter').val(),
            email: $('#emailFilter').val(),
            role: $('#roleFilter').val(),
            keyword: $('#keywordFilter').val()
          };
        }

        loadUsers();

        $userForm.on('submit', function(e) {
          e.preventDefault();
          const formData = $userForm.serialize();
          const url = $userForm.find('#userId').val() ? '/admin/api/users' : '/admin/api/users';
          const method = $userForm.find('#userId').val() ? 'PUT' : 'POST';
          
          $.ajax({
            url: url,
            method: method,
            data: formData,
            success: function(data) {
              if (data.success) {
                loadUsers(currentPage, getFilters());
                $userModal.hide();
                $userForm[0].reset();
              } else {
                alert('Failed to save user');
              }
            },
            error: function(err) {
              console.error('Error saving user:', err);
            }
          });
        });

        $userTableBody.on('click', '.editUserButton', function() {
          const $row = $(this).closest('tr');
          const userId = $row.data('id');
          const username = $row.find('td').eq(1).text();
          const email = $row.find('td').eq(2).text();
          const role = $row.find('td').eq(3).text();
          const avatar = $row.data('avatar');

          $('#userId').val(userId);
          $('#username').val(username);
          $('#email').val(email);
          $('#role').val(role);
          $('#avatar').val(avatar);
          $userModal.show();
        });

        $userTableBody.on('click', '.deleteUserButton', function() {
          const userId = $(this).closest('tr').data('id');
          if (confirm('Are you sure you want to delete this user?')) {
            $.ajax({
              url: '/admin/api/users',
              method: 'DELETE',
              data: { id: userId },
              success: function(data) {
                if (data.success) {
                  loadUsers(currentPage, getFilters());
                } else {
                  alert('Failed to delete user');
                }
              },
              error: function(err) {
                console.error('Error deleting user:', err);
              }
            });
          }
        });

        $pagination.on('click', '.page-link', function(e) {
          e.preventDefault();
          const page = $(this).text();
          currentPage = parseInt(page);
          loadUsers(currentPage, getFilters());
        });

        $('#applyFilters').on('click', function() {
          loadUsers(currentPage, getFilters());
        });

        $('.sortable').on('click', function() {
          const $header = $(this);
          const sortField = $header.text().toLowerCase();
          const sortOrder = $header.data('sortOrder') === 'asc' ? 'desc' : 'asc';
          $header.data('sortOrder', sortOrder);

          loadUsers(currentPage, getFilters(), { field: sortField, order: sortOrder });
        });
      });

    script(src='https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js' integrity='sha256-ipiJrswvAR4VAx/th+6zWsdeYmVae0iJuiR+6OqHJHQ=' crossorigin='anonymous')
    // sortablejs
    script.
      const connectedSortables =
      document.querySelectorAll(".connectedSortable");
      connectedSortables.forEach((connectedSortable) => {
      let sortable = new Sortable(connectedSortable, {
      group: "shared",
      handle: ".card-header",
      });
      });
      const cardHeaders = document.querySelectorAll(
      ".connectedSortable .card-header",
      );
      cardHeaders.forEach((cardHeader) => {
      cardHeader.style.cursor = "move";
      });